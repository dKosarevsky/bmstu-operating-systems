1.
user|group|other
rwx |rwx  |rwx

установленный бит в маске отключает соответствующий бит права доступа	

Пример: (file_u0ABC_d0XYZ - файл создан с маской ABC и правами доступа XYZ)
---------- 1 ilyaps ilyaps    0 мар 18 22:44 file_u0000_d0000
-rwxrwxrwx 1 ilyaps ilyaps    0 мар 18 22:45 file_u0000_d0777
---------- 1 ilyaps ilyaps    0 мар 18 22:45 file_u0777_d0000
---------- 1 ilyaps ilyaps    0 мар 18 22:45 file_u0777_d0777

------------------------
1a. Как создать файл с правами доступа для всех видов пользователей равными 0;

umask(0777);
create("foo", 0XXX);

------------------------
1b.  Как создать файл с полными правами доступа для всех видов пользователей;

umask(0000);
create("foo", 0777);

------------------------
1c. Что произойдет, если маску режима создания файлов задать равной 777?

Ни у кого не будет прав доступа к этому файлу

------------------------
1d. Сможете ли Вы прочитать собственный файл при сброшенном бите user-read?

Не смогу прочитать.

------------------------
2a.	Какое поле структуры stat отвечает за размер файла? 

off_t st_size;
имеет смысл только для обычных файлов, каталогов и символических ссылок.

------------------------
2b.	Что обозначает значение  поля размера файла для символических ссылок? 

Кол-во байт, необходимых для записи пути к указанному в символической ссылке файлу (т.е. кол-во символов для записи пути)

------------------------
2c.	Чему будет равно значение этого поля для символической ссылки lib->user/lib? 

=8

------------------------
2d.	Что определяют поля st_blksize и st_blocks?  

st_blksize - оптимальный размер блока ввода/вывода.
st_blocks - колличество занятых 512-байтных дисковых блоков файлом.

------------------------
2e.	Какой размер буфера надо установить для минимизации времени выполнения операций ввода-вывода?

st_blksize

------------------------
3. На примерер файлов, содержащих «дырки», поясните разницу между работой команд ls –l  и du –s.

В файлах могут быть "дырки".  Они возникают, если перенести текущую позицию за пределы файла и записать некоторые данные.
ls для некоторого файла core вернет 8мб
du - вернет кол-во занятых блоков. Для некоторого файла core вернет 272 блока (1 блок = 512 байт, итого 139кбайт)

------------------------
4. Как уменьшить размер файла?

Функции 
int truncate(const char *pathname, off_t length)
int ftruncate(int fd, off_t length)
выполняют усечение существующего файла до размера length. Если length больше текущего размера, будет создана "дырка". 

------------------------
5. Какая функция удаляет записи из каталога? Когда можно удалить файл и что происходит с его индексными узлами?

int unlink(const char *pathname) 
удаляет запись из файла каталога
В индексном узле хранится счетчик ссылок, в котором хранится число записей в файле каталога, которые ссылаются на данный индексный узел. Файл будет удален, когда этот счетчик ссылок и счетчик процессов, открывших файл, будут равны 0.

------------------------
6a. Что происходит при  перемещении/переименовании файла в пределах одной файловой системы с фактическим содержимым файла  ( с его индексными узлами )? 

Фактическое содержимое файла никуда не перемещается. В каталог добавится новая запись которая будет указывать на существующий  индексный узел. Старая запись будет отцеплена. 

------------------------
6b. Изменяется ли при этом счетчик ссылок?

Нет.

------------------------
7. Файл имеет три атрибута времени: st_atime, st_mtime, st_ctime. Какой ключ команды  ls позволит вывести на экран информацию о последнем изменении статуса индексного узла?

st_atime - время последнего доступа к содержимому файла (ls -u)
st_mtime - время последнего изменения содержимого файла (ls -t)
st_ctime - время последнего изменения статуса индексного узла (ls -c)

------------------------
8. Когда с помощью команды rmdir будет удален из системы каталог?
															
Каталог будет удален из системы, если счетчик ссылок на каталог становится = 0 и при этом никакой процесс не удерживает каталог открытым.

------------------------
9. Что возвращает функция opendir()?

DIR *opendir(const char *pathname)
DIR - внутренняя структура, хранит информацию о каталоге. opendir выполняет первичную инициализацию DIR, для последующего вызова readdir.

------------------------
10. Какая функция «читает» содержимое каталога?

struct dirent *readdir(DIR *dp)
Возвращаемая структура dirent как минимум содержит:
	d_ino - номер индексног оузла;
	d_name - строка имени файла.
Вернет NULL если записей больше нет.

------------------------
11. Какие типы файлов определены в Unix/Linux?

макрос		|	тип файла
-------------------------------------------------
S_ISREG()	|	обычный файл
S_ISDIR()	|	каталог
S_ISCHR()	|	спец. файл символьного устройства
S_ISBLC()	|	спец. файл блочного устройства
S_ISFIFO()	|	канал
S_ISLNK()	|	символическая ссылка
S_ISSOCK()	|	сокет